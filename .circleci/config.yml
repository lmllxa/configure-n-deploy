# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
executors:
  my-executor:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/

jobs:
  get_url:
    executor: my-executor
    steps:
      - run:
          name: Install tar utility
          command: |
            yum update -y
            yum install -y tar gzip
      - run:
          name: Get frontend url
          command: |
            export FRONTEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=node-web-server" \
              --output text)
            export API_URL="http://${FRONTEND_IP}:3000"
            echo $API_URL > ~/echo-output
            cat ~/echo-output
            ls -al
            #echo $FRONTEND_IP >> ~/project/inventory
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ~/
          # Must be relative path from root
          paths:
            - echo-output

  print_url:
    executor: my-executor
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Print URL
          command: |
            cat ~/echo-output
            export MY_IP=`cat ~/echo-output`    
            echo $MY_IP   
  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.16
    working_directory: ~/
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              # fingerprints: ["74:6b:a1:9f:84:19:56:fd:e9:4b:38:e1:8a:5f:b3:55"] 
              fingerprints: ["0a:cf:9f:c3:5c:98:07:e8:b3:bd:ea:fa:a5:44:22:3e"]
      - run:
          name: Install aws cli and Ansible
          command: |
            # Install aws cli
            pip install awscli
            apk add  --no-cache aws-cli tar gzip
            apk --no-cache add curl
            aws --version
            # Install Ansible
            apk add --update ansible
      - run:
          name: Get frontend url
          command: |
            export FRONTEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=node-web-server" \
              --output text >> inventory)
            cat inventory
            export API_URL="http://${FRONTEND_IP}:3000"
      - persist_to_workspace:
          root: ~/
        # Must be relative path from root
          paths:
            - inventory
      - run:
          name: List files
          command: |
            ls -al
            echo '^^^The files in my repo^^^'
      - run:
          name: Run Playbook and Configure server
          command: |
            # Your command --private-key udacity.pem
            ansible-playbook main.yml -i inventory 
  smoke_test:
    executor: my-executor
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: smoke test
          command: |
            cat /tmp/workspace/echo-output
            export MY_WEB_URL=`cat /tmp/workspace/echo-output`    
            echo $MY_WEB_URL 
            # Test if website works
            fn() {
              if curl -s --head ${MY_WEB_URL} 
              then
                return 0
              else
                return 1
              fi              
            }
            fn
  smoke_test2:
    docker:
      - image: python:3.7-alpine3.16
    working_directory: ~/
    steps:
      - run:
          name: Install tar utility
          command: |
            apk add  --no-cache tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: 2nd smoke test
          command: |
            cat inventory
            # Test if website works
            fn() {
              if curl -s --head ${API_URL} 
              then
                return 0
              else
                return 1
              fi              
            }
            fn

workflows:
  myWorkflow:
    jobs:
      - get_url
      - print_url:
          requires:
            - get_url
      - configure_infrastructure
      - smoke_test:
          requires:
            - print_url
      - smoke_test2:
          requires:
            - configure_infrastructure
